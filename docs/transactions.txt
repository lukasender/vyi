.. highlight:: python

===============================
User to User (u2u) transactions
===============================

Introduction
============

This test suite tests the 2 phase-commit transaction implementation.

A user can tranfser balance from his account to another users' account.
The transaction process is performed via a 2 phase-commit.

The first phase accepts a new transaction from a user.
The second phase transfers the amount from the sender to the receiver and takes
care of data consistency.

Setup of the suite
------------------

    >>> from crate.client import connect
    >>> from vyi.app.model import genuuid
    >>> import requests
    >>> import json
    >>> import time

Establish a connection to the database::

    >>> connection = connect(crate_host)

Get the cursor to execute SQL statements::

    >>> cursor = connection.cursor()
    >>> cursor.rowcount
    -1

Ensure, that all required tables exist::

    >>> stmt = "SELECT table_name "\
    ...        "FROM information_schema.tables "\
    ...        "WHERE schema_name = 'doc' ORDER BY table_name"
    >>> cursor.execute(stmt)
    >>> cursor.fetchall()
    [[u'projects'], [u'stats'], [u'transactions'], [u'user_transactions'], [u'users']]

Ensure, that the app is running.

    >>> app
    <webtest.app.TestApp object at ...>
    >>> r = app.get('/probe_status')
    >>> r.status
    '200 OK'

Add three users::

    >>> nikola_tesla = {'nickname': 'nikola_tesla', 'balance': 10000}
    >>> elon_musk = {'nickname': 'elon_musk', 'balance': 10000}
    >>> jacque_fresco = {'nickname': 'jacque_fresco', 'balance': 10000}
    >>> def register_user(user):
    ...     r = app.post_json('/users/register', user)
    ...     return r.status, r.json['status']
    >>> register_user(nikola_tesla)
    ('200 OK', u'success')
    >>> register_user(elon_musk)
    ('200 OK', u'success')
    >>> register_user(jacque_fresco)
    ('200 OK', u'success')

Get the id's of the users (result list of users are ordered
by the user.nickname)::

    >>> r = app.get('/users')
    >>> r.status
    '200 OK'
    >>> users = r.json['data']['users']
    >>> elon_musk = users[0]
    >>> elon_musk['nickname']
    u'elon_musk'
    >>> jacque_fresco = users[1]
    >>> jacque_fresco['nickname']
    u'jacque_fresco'
    >>> nikola_tesla = users[2]
    >>> nikola_tesla['nickname']
    u'nikola_tesla'

Define some helper functions which compare given parameters with the properties
of a ``transaction`` or ``user_transaction``::

    >>> def check_transaction_state(transaction_id, state):
    ...     """ A helper function which compares the state of a
    ...         transaction with given 'state'.
    ...
    ...         @returns True if 'state' matches the transaction state;
    ...                  False otherwise.
    ...     """
    ...     refresh("transactions")
    ...     stmt = "SELECT state "\
    ...            "FROM transactions WHERE id = ?"
    ...     cursor.execute(stmt, (transaction_id,))
    ...     return cursor.fetchone()[0] == state

    >>> def check_user_transactions(transaction_id, sender, receiver, amount, state):
    ...     """ A helper function which fetches the user_transactions with
    ...         given transaction_id and compares its properties with given
    ...         parameters.
    ...
    ...         @returns False if any parameter does not match; True otherwise.
    ...     """
    ...     refresh("user_transactions")
    ...     stmt = "SELECT user_id, amount, state FROM user_transactions "\
    ...            "WHERE transaction_id = ? ORDER BY amount"
    ...     cursor.execute(stmt, (transaction_id,))
    ...     user_transactions = cursor.fetchall()
    ...     # fetchall() returns a 2 dimensional array.
    ...     # The first dimension represents a row of the result set.
    ...     # The second dimension represent the columns of a row. The second
    ...     # dimension is sorted accordingly as described in the SQL projection.
    ...     if not user_transactions[0][0] == sender:
    ...         return False
    ...     if not user_transactions[1][0] == receiver:
    ...         return False
    ...     if not user_transactions[0][1] == -amount:
    ...         return False
    ...     if not user_transactions[1][1] == amount:
    ...         return False
    ...     if not user_transactions[0][2] == state:
    ...         return False
    ...     if not user_transactions[1][2] == state:
    ...         return False
    ...     return True

First phase of the 2PC
======================

Nikola wants to transfer some of his balance to Elon, resulting in new balances
of 9900 for Nikola and 10100 for Elon Musk::

    >>> transaction = {
    ...     'sender': nikola_tesla['id'],
    ...     'receiver': elon_musk['id'],
    ...     'amount': 100
    ... }
    >>> r = app.post_json('/transactions/u2u', transaction)
    >>> r.json['status']
    u'success'

At the same time, Elon wants to transfer some of his balance to Jacque,
resulting in new balances of 9600 for Elon and 10500 for Jacque::

    >>> transaction = {
    ...     'sender': elon_musk['id'],
    ...     'receiver': jacque_fresco['id'],
    ...     'amount': 500
    ... }
    >>> r = app.post_json('/transactions/u2u', transaction)
    >>> r.json['status']
    u'success'

Let's inspect the 'transactions' table. ::

    >>> refresh('transactions')
    >>> stmt = "SELECT id, sender, receiver, amount, type, state "\
    ...        "FROM transactions ORDER BY timestamp"
    >>> cursor.execute(stmt)
    >>> transactions = cursor.fetchall()

Compare the results of transaction 1 (Nikola Tesla -> Elon Musk)::

    >>> transactions[0][1] == nikola_tesla['id']
    True
    >>> transactions[0][2] == elon_musk['id']
    True
    >>> transactions[0][3]
    100.0
    >>> transactions[0][4]
    u'u2u'
    >>> transactions[0][5]
    u'initial'

Compare the reuslts of transaction 2 (Elon Musk -> Jacque Fresco)::

    >>> transactions[1][1] == elon_musk['id']
    True
    >>> transactions[1][2] == jacque_fresco['id']
    True
    >>> transactions[1][3]
    500.0
    >>> transactions[1][4]
    u'u2u'
    >>> transactions[1][5]
    u'initial'

Second phase of the 2PC
=======================

Process all pending transactions::

    >>> r = app.post('/transactions/process')
    >>> r.json['status']
    u'success'
    >>> r.json['failed_transactions']
    []

Let's inspect the 'transactions' table again. ::

    >>> refresh('transactions')
    >>> stmt = "SELECT id, sender, receiver, state "\
    ...        "FROM transactions ORDER BY timestamp"
    >>> cursor.execute(stmt)
    >>> transactions = cursor.fetchall()

Compare the results of transaction 1 (Nikola Tesla -> Elon Musk)::

    >>> transactions[0][1] == nikola_tesla['id']
    True
    >>> transactions[0][2] == elon_musk['id']
    True
    >>> transactions[0][3]
    u'finished'

Compare the reuslts of transaction 2 (Elon Musk -> Jacque Fresco)::

    >>> transactions[1][1] == elon_musk['id']
    True
    >>> transactions[1][2] == jacque_fresco['id']
    True
    >>> transactions[1][3]
    u'finished'

Check new balance for each user::

    >>> r = app.get('/users')
    >>> r.status
    '200 OK'
    >>> users = r.json['data']['users']
    >>> users[0]['nickname'], users[0]['balance']
    (u'elon_musk', 9600.0)
    >>> users[1]['nickname'], users[1]['balance']
    (u'jacque_fresco', 10500.0)
    >>> users[2]['nickname'], users[2]['balance']
    (u'nikola_tesla', 9900.0)

Test edge and error cases
=========================

The following section illustrates the different steps of the sechond phase
of the 2PC. It focuses on the error cases, and especially on resuming an
incomplete transaction.

The general assumption is, that the first phase of the 2PC is successful.
Therefore, the transaction is inserted manually into the ``transactions``
table. The next assumption is, that a transaction cannot be completed
because of an error and a transaction must therefore be repaired at a later
time. An error could possibly be anything, such as a network or hardware
error.

Resuming from ``in progress``
-----------------------------

Case 1
......

Assume, that a transaction has already been processed but failed.
A transaction is in the ``transactions`` table, marked as ``in progress``.
Then an error occurred. No ``user_transaction`` was done.

Set up the transaction::

    >>> transaction_id = genuuid()
    >>> sender = elon_musk['id']
    >>> receiver = nikola_tesla['id']
    >>> amount = 400
    >>> stmt = "INSERT INTO transactions "\
    ...        "(id, \"timestamp\", sender, receiver, amount, type, state) "\
    ...        "VALUES (?, ?, ?, ? ,?, ?, ?)"
    >>> args = (
    ...     transaction_id,
    ...     time.time(),
    ...     sender,
    ...     receiver,
    ...     amount,
    ...     "u2u",
    ...     "in progress",
    ... )
    >>> cursor.execute(stmt, args)
    >>> cursor.rowcount == 1
    True

Repair the transaction by resuming it::

    >>> r = app.post('/transactions/process')
    >>> r.json['status'], r.json['failed_transactions']
    (u'success', [])

Check the state of the transaction and the user transactions::

    >>> check_transaction_state(transaction_id, u'finished')
    True
    >>> check_user_transactions(transaction_id, sender, receiver,
    ...                        amount, u'finished')
    True

Case 2
......

Assume, that a transaction has already been processed but failed.
A transaction is in the ``transactions`` table, marked as ``in progress``.
One ``user_transaction`` is added to the respective user and is marked
as ``pending``. Then an error occured. The second ``user_transaction``, as well
as the last steps to finish the transaction are missing.

Set up the transaction::

    >>> transaction_id = genuuid()
    >>> sender = elon_musk['id']
    >>> receiver = nikola_tesla['id']
    >>> amount = 50
    >>> stmt = "INSERT INTO transactions "\
    ...        "(id, \"timestamp\", sender, receiver, amount, type, state) "\
    ...        "VALUES (?, ?, ?, ? ,?, ?, ?)"
    >>> args = (
    ...     transaction_id,
    ...     time.time(),
    ...     sender,
    ...     receiver,
    ...     amount,
    ...     "u2u",
    ...     "in progress",
    ... )
    >>> cursor.execute(stmt, args)
    >>> cursor.rowcount == 1
    True

Set up the user transaction::

    >>> user_transaction_id = genuuid()
    >>> user_id = elon_musk['id']
    >>> stmt = "INSERT INTO user_transactions (id, user_id, "\
    ...        "\"timestamp\", amount, transaction_id, state) "\
    ...        "VALUES (?,?,?,?,?,?)"
    >>> args = (
    ...     user_transaction_id,
    ...     user_id,
    ...     time.time(),
    ...     -amount,
    ...     transaction_id,
    ...     "pending",
    ... )
    >>> cursor.execute(stmt, args)
    >>> cursor.rowcount == 1
    True

Repair the transaction by resuming it::

    >>> r = app.post('/transactions/process')
    >>> r.json['status'], r.json['failed_transactions']
    (u'success', [])

Check the state of the transaction and the user transactions::

    >>> check_transaction_state(transaction_id, u'finished')
    True
    >>> check_user_transactions(transaction_id, sender, receiver,
    ...                        amount, u'finished')
    True

Case 3
......

Assume, that a transaction has already been processed but failed.
A transaction is in the ``transactions`` table, marked as ``in progress``.
Both ``user_transactions`` are added to the respective user and are marked
as ``pending``. Then an error occured.

Set up the transaction::

    >>> transaction_id = genuuid()
    >>> sender = elon_musk['id']
    >>> receiver = nikola_tesla['id']
    >>> amount = 150
    >>> stmt = "INSERT INTO transactions "\
    ...        "(id, \"timestamp\", sender, receiver, amount, type, state) "\
    ...        "VALUES (?, ?, ?, ? ,?, ?, ?)"
    >>> args = (
    ...     transaction_id,
    ...     time.time(),
    ...     sender,
    ...     receiver,
    ...     amount,
    ...     "u2u",
    ...     "in progress",
    ... )
    >>> cursor.execute(stmt, args)
    >>> cursor.rowcount == 1
    True

Set up both user transactions::

    >>> user_transaction_id = genuuid()
    >>> user_id = elon_musk['id']
    >>> stmt = "INSERT INTO user_transactions (id, user_id, "\
    ...        "\"timestamp\", amount, transaction_id, state) "\
    ...        "VALUES (?,?,?,?,?,?)"
    >>> args = (
    ...     user_transaction_id,
    ...     user_id,
    ...     time.time(),
    ...     -amount,
    ...     transaction_id,
    ...     "pending",
    ... )
    >>> cursor.execute(stmt, args)
    >>> cursor.rowcount == 1
    True

    >>> user_transaction_id = genuuid()
    >>> user_id = nikola_tesla['id']
    >>> stmt = "INSERT INTO user_transactions (id, user_id, "\
    ...        "\"timestamp\", amount, transaction_id, state) "\
    ...        "VALUES (?,?,?,?,?,?)"
    >>> args = (
    ...     user_transaction_id,
    ...     user_id,
    ...     time.time(),
    ...     amount,
    ...     transaction_id,
    ...     "pending",
    ... )
    >>> cursor.execute(stmt, args)
    >>> cursor.rowcount == 1
    True

Repair the transaction by resuming it::

    >>> r = app.post('/transactions/process')
    >>> r.json['status'], r.json['failed_transactions']
    (u'success', [])

Check the state of the transaction and the user transactions::

    >>> check_transaction_state(transaction_id, u'finished')
    True
    >>> check_user_transactions(transaction_id, sender, receiver,
    ...                        amount, u'finished')
    True

Resuming from ``committed``
---------------------------

Case 1
......

Assume, that a transaction has already been processed but failed.
A transaction is in the ``transactions`` table, marked as ``committed``.
Therefore, both ``user_transactions`` has been added to the respective user and
are marked as ``pending``. Then an error occured.

Set up the transaction::

    >>> transaction_id = genuuid()
    >>> sender = elon_musk['id']
    >>> receiver = nikola_tesla['id']
    >>> amount = 200
    >>> stmt = "INSERT INTO transactions "\
    ...        "(id, \"timestamp\", sender, receiver, amount, type, state) "\
    ...        "VALUES (?, ?, ?, ? ,?, ?, ?)"
    >>> args = (
    ...     transaction_id,
    ...     time.time(),
    ...     sender,
    ...     receiver,
    ...     amount,
    ...     "u2u",
    ...     "committed",                        # mark as committed
    ... )
    >>> cursor.execute(stmt, args)
    >>> cursor.rowcount == 1
    True

Set up both user transactions::

    >>> user_transaction_id = genuuid()
    >>> user_id = elon_musk['id']
    >>> stmt = "INSERT INTO user_transactions (id, user_id, "\
    ...        "\"timestamp\", amount, transaction_id, state) "\
    ...        "VALUES (?,?,?,?,?,?)"
    >>> args = (
    ...     user_transaction_id,
    ...     user_id,
    ...     time.time(),
    ...     -amount,
    ...     transaction_id,
    ...     "pending",
    ... )
    >>> cursor.execute(stmt, args)
    >>> cursor.rowcount == 1
    True

    >>> user_transaction_id = genuuid()
    >>> user_id = nikola_tesla['id']
    >>> stmt = "INSERT INTO user_transactions (id, user_id, "\
    ...        "\"timestamp\", amount, transaction_id, state) "\
    ...        "VALUES (?,?,?,?,?,?)"
    >>> args = (
    ...     user_transaction_id,
    ...     user_id,
    ...     time.time(),
    ...     amount,
    ...     transaction_id,
    ...     "pending",
    ... )
    >>> cursor.execute(stmt, args)
    >>> cursor.rowcount == 1
    True

Repair the transaction by resuming it::

    >>> r = app.post('/transactions/process')
    >>> r.json['status'], r.json['failed_transactions']
    (u'success', [])

Check the state of the transaction and the user transactions::

    >>> check_transaction_state(transaction_id, u'finished')
    True
    >>> check_user_transactions(transaction_id, sender, receiver,
    ...                        amount, u'finished')
    True

Case 2
......

Assume, that a transaction has already been processed but failed. A
transaction is in the ``transactions`` table, marked as ``committed``.
Therefore, both ``user_transactions`` has been added to the respective user
and are marked as ``pending``. The first ``user_transaction`` is already
marked as ``finished``. Then an error occured.

Set up the transaction::

    >>> transaction_id = genuuid()
    >>> sender = elon_musk['id']
    >>> receiver = nikola_tesla['id']
    >>> amount = 200
    >>> stmt = "INSERT INTO transactions "\
    ...        "(id, \"timestamp\", sender, receiver, amount, type, state) "\
    ...        "VALUES (?, ?, ?, ? ,?, ?, ?)"
    >>> args = (
    ...     transaction_id,
    ...     time.time(),
    ...     sender,
    ...     receiver,
    ...     amount,
    ...     "u2u",
    ...     "committed",
    ... )
    >>> cursor.execute(stmt, args)
    >>> cursor.rowcount == 1
    True

Set up both user transactions::

    >>> user_transaction_id = genuuid()
    >>> user_id = elon_musk['id']
    >>> stmt = "INSERT INTO user_transactions (id, user_id, "\
    ...        "\"timestamp\", amount, transaction_id, state) "\
    ...        "VALUES (?,?,?,?,?,?)"
    >>> args = (
    ...     user_transaction_id,
    ...     user_id,
    ...     time.time(),
    ...     -amount,
    ...     transaction_id,
    ...     "finished",                         # mark as finished
    ... )
    >>> cursor.execute(stmt, args)
    >>> cursor.rowcount == 1
    True

    >>> user_transaction_id = genuuid()
    >>> user_id = nikola_tesla['id']
    >>> stmt = "INSERT INTO user_transactions (id, user_id, "\
    ...        "\"timestamp\", amount, transaction_id, state) "\
    ...        "VALUES (?,?,?,?,?,?)"
    >>> args = (
    ...     user_transaction_id,
    ...     user_id,
    ...     time.time(),
    ...     amount,
    ...     transaction_id,
    ...     "pending",
    ... )
    >>> cursor.execute(stmt, args)
    >>> cursor.rowcount == 1
    True

Repair the transaction by resuming it::

    >>> r = app.post('/transactions/process')
    >>> r.json['status'], r.json['failed_transactions']
    (u'success', [])

Check the state of the transaction and the user transactions::

    >>> check_transaction_state(transaction_id, u'finished')
    True
    >>> check_user_transactions(transaction_id, sender, receiver,
    ...                        amount, u'finished')
    True

Case 3
......

Assume, that a transaction has already been processed but failed. A
transaction is in the ``transactions`` table, marked as ``committed``.
Both ``user_transactions`` has been added to the respective user
and are marked as ``finished``. Then an error occured.

Set up the transaction::

    >>> transaction_id = genuuid()
    >>> sender = elon_musk['id']
    >>> receiver = nikola_tesla['id']
    >>> amount = 200
    >>> stmt = "INSERT INTO transactions "\
    ...        "(id, \"timestamp\", sender, receiver, amount, type, state) "\
    ...        "VALUES (?, ?, ?, ? ,?, ?, ?)"
    >>> args = (
    ...     transaction_id,
    ...     time.time(),
    ...     sender,
    ...     receiver,
    ...     amount,
    ...     "u2u",
    ...     "committed",
    ... )
    >>> cursor.execute(stmt, args)
    >>> cursor.rowcount == 1
    True

Set up both user transactions::

    >>> user_transaction_id = genuuid()
    >>> user_id = elon_musk['id']
    >>> stmt = "INSERT INTO user_transactions (id, user_id, "\
    ...        "\"timestamp\", amount, transaction_id, state) "\
    ...        "VALUES (?,?,?,?,?,?)"
    >>> args = (
    ...     user_transaction_id,
    ...     user_id,
    ...     time.time(),
    ...     -amount,
    ...     transaction_id,
    ...     "finished",                         # mark as finished
    ... )
    >>> cursor.execute(stmt, args)
    >>> cursor.rowcount == 1
    True

    >>> user_transaction_id = genuuid()
    >>> user_id = nikola_tesla['id']
    >>> stmt = "INSERT INTO user_transactions (id, user_id, "\
    ...        "\"timestamp\", amount, transaction_id, state) "\
    ...        "VALUES (?,?,?,?,?,?)"
    >>> args = (
    ...     user_transaction_id,
    ...     user_id,
    ...     time.time(),
    ...     amount,
    ...     transaction_id,
    ...     "finished",                         # mark as finished
    ... )
    >>> cursor.execute(stmt, args)
    >>> cursor.rowcount == 1
    True

Repair the transaction by resuming it::

    >>> r = app.post('/transactions/process')
    >>> r.json['status'], r.json['failed_transactions']
    (u'success', [])

Check the state of the transaction and the user transactions::

    >>> check_transaction_state(transaction_id, u'finished')
    True
    >>> check_user_transactions(transaction_id, sender, receiver,
    ...                        amount, u'finished')
    True



